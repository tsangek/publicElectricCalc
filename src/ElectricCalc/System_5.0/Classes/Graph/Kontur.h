#ifndef KonturH
#define KonturH

#include <stdio.h>
#include <math.h>

#include "E:\Data_all\User_Class7\block1.h"           			//константы
#include "..\Uzel\Class_Uzel_Elektrik.h"                        //класс узлов
#include "..\Rebro\Class_Rebro_Elektrik.h"                      //класс рёбер
//---------------------------------------------------------------------------
class Kontur //Класс анализа графа и поиска независимых контуров
{
public:
//типы класса
Class_Uzel_Elektrik **Class_Uzel;      //массив классов узлов
Class_Rebro_Elektrik **Class_Rebro;    //массив классов рёбер

//указатели
int ***Kontury;		//массив независимых замкнутых контуров
int *Rangy;			//сколько рёбер в независимом замкнутом контуре
int *pr_nezavis;   	//массив, показывающий были ли контуры с данным ребром (0 - небыло, 1 - были)
int *Uzel_propusk;	//массив начальных узлов в каждой несвязной цепи, которые входят в замкнутые контура
int *Uzel_svjaz;	//показывает какой по счёту несвязаной цепи принадлежит узел

// переменные класса (уникальные для каждого экземпляра)
int Kontur_rang_current;    //количество найденных в данный момент независимых замкнутых контуров
int Kontur_rang_max;        //максимальное количество независимых замкнутых контуров по теории графов
int kontur_count;           //кол-во несвязных цепей в графе
bool enough;                //достигнуто ли максимально возможное кол-во независимых замкнутых контуров
int Uzel_kol;               //кол-во узлов
int Rebro_kol;              //кол-во рёбер

// конструктор класса:
Kontur();

//псевдодеструктор класса:
void delete_Kontur_data();

//инициализация переменных класса:
void Ini(Class_Uzel_Elektrik **Class_Uzel_in, Class_Rebro_Elektrik **Class_Rebro_in,
		int Uzel_kol_in, int Rebro_kol_in, int Kluch_kol);

// Методы класса:

//---------------------------------------------
//Рекурсивный метод поиска пути. Вызывает сам себя для узлов-соседей где ещё не был.
//Умирает, если в узле уже был и вызывает запись всего пути (write_to_Kontury),
//если пришёл в узел начала.
int Find_Kontur(int Uzel_num, int *pr_Uzel, int *Kontur_path_in, int Kontur_rang_in, bool *Kontur_znak);

//---------------------------------------------
//запись всего пройденного пути (замкнутого контура), пройденного с помощью
//Find_Kontur, если он независимый, т.е. в него входит хотя бы одно ребро,
//которого не было в других контурах
void write_to_Kontury(int *Kontur_path, int Kontur_rang, bool *Kontur_znak);

//---------------------------------------------
//Первый вызов рекурсии Find_Kontur
int Start_from(int Uzel_num);

//---------------------------------------------
//запуск поиска замкнутых независимых контуров - инициализирует переменные и
//массивы, вызывает Start_from.
int Start_all();

//---------------------------------------------
//Определяет из скольки несвязаных цепей состоит граф при помощи Find_svjaz
int Svjaznost(int *kontur_count_out);

//---------------------------------------------
//Рекурсивно ищет узлы в которые можно попасть из начального по принципу Find_Kontur
int Find_svjaz(int Uzel_num, int *pr_Uzel, int Rebro_vhoda);

//---------------------------------------------
//записывает рёбра не вошедшие ни в один независимый замкнутый контур -
//"оборванные" рёбра
int Find_cut_wires(int *pr_cut_wires);

//---------------------------------------------
//В каждой несвязаной цепи выбирает узел начала, принадлежащий замкнутому
//контуру, и записывает его
int Find_Uzel_svjaz();

//---------------------------------------------
//печать независимых замкнутых контуров
void fprint_kontur(FILE *f);
//печать знаков рёбер при обходе независимых замкнутых контуров
void fprint_znak(FILE *f);
//---------------------------------------------
};
#endif
//---------------------------------------------------------------------------
